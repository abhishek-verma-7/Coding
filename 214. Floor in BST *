Given a Binary search tree and a value X,  the task is to complete the function which will return the floor of x.
Note: Floor(X) is an element that is either equal to X or immediately smaller to X. If no such element exits return -1.
Example 1:
Input:
       8
     /  \
    5    9
   / \    \
  2   6   10
X = 3
Output: 2
Explanation: Floor of 3 in the given BST
is 2

// Function to find the floor of given number.
int floorUtil(Node* root, int key) {
    if (!root) return INT_MAX;

    // if data at current node is equal to given number, we return it.
    if (root->data == key) return root->data;

    // if data at current node is greater than given number, we call
    // the function recursively for left subtree.
    if (root->data > key) return floorUtil(root->left, key);

    // else data at current node is smaller than given number so we call
    // the function recursively for right subtree.
    int floorValue = floorUtil(root->right, key);

    return (floorValue <= key) ? floorValue : root->data;
}

// Function to return the floor of given number in BST.
int floor(Node* root, int key) {
    int ans = floorUtil(root, key);

    // returning floor of given number or -1 if no such element exists.
    if (ans == INT_MAX) return -1;

    return ans;
}

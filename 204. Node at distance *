Given a Binary Tree and a positive integer k. The task is to count all distinct nodes that are distance k from a leaf node. 
A node is at k distance from a leaf if it is present k levels above the leaf and also, is a direct ancestor of this leaf node.
If k is more than the height of Binary Tree, then nothing should be counted.
Example 1:
Input:
        1
      /   \
     2     3
   /  \   /  \
  4   5  6    7
          \ 
          8
K = 2
Output: 2
Explanation: There are only two unique
nodes that are at a distance of 2 units
from the leaf node. (node 3 for leaf
with value 8 and node 1 for leaves with
values 4, 5 and 7)
Note that node 2
isn't considered for leaf with value
8 because it isn't a direct ancestor
of node 8.

// Program
void kDistantFromLeafUtil(Node* node,int &counter,bool visited[],int pathLen,int k)
{
	//base case
	if (node==NULL) return;

	visited[pathLen] = false;
	pathLen++;

	//if it's a leaf node, we increment the count but only if the 
	//same ancestor at distance k is not already counted.
	if (node->left == NULL && node->right == NULL &&
		pathLen-k-1 >= 0 && visited[pathLen-k-1] == false)
	{
		counter++;
		//setting the ancestor as visited so that we won't count it again.
		visited[pathLen-k-1] = true;
		return;
	}

	//if the current node is not a leaf node then we call the function 
	//recursively for left and right subtrees.
	kDistantFromLeafUtil(node->left, counter, visited, pathLen, k);
	kDistantFromLeafUtil(node->right, counter, visited, pathLen, k);
	
}

//Function to return count of nodes at a given distance from leaf nodes.
int printKDistantfromLeaf(Node* node, int k)
{
	int counter = 0;
	bool visited[MAX_HEIGHT] = {false};
	kDistantFromLeafUtil(node, counter, visited, 0, k);
	
	//returning the count.
	return counter;
}

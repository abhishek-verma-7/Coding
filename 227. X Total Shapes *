Given  a grid of n*m consisting of O's and X's. The task is to find the number of 'X' total shapes.
Note: 'X' shape consists of one or more adjacent X's (diagonals not included).

Example 1:
Input: grid = {{X,O,X},{O,X,O},{X,X,X}}
Output: 3
Explanation: 
The grid is-
X O X
O X O
X X X
So, X with same colour are adjacent to each 
other vertically for horizontally (diagonals 
not included). So, there are 3 different groups 
in the given grid.

void dfs(int i, int j, int n, int m, vector<vector<char>> &grid)
    {
        
        //checking whether the cell is within the matrix bounds.
        if(i<0 || j<0 || i == n || j == m || grid[i][j] == 'O')
            return;
        
        //we update the grid value as 0 and
        //call the function recursively for adjacent nodes.
        grid[i][j] = 'O';
        
        dfs(i+1, j, n, m, grid); //down
        dfs(i-1, j, n, m, grid); //up
        dfs(i, j+1, n, m, grid); //right
        dfs(i, j-1, n, m, grid); //left
    }
    
    //Function to find the number of 'X' total shapes.
    int xShape(vector<vector<char>>& grid) 
    {
        // Code here
        int n = grid.size();
        int m = grid[0].size();
        int count = 0;
        
        
        //traversing all the cells of the matrix.
        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < m; j++)
            {
                //if grid value is X, we increment the counter and
                //call the dfs function.
                if(grid[i][j] == 'X')
                {
                    count++;
                    dfs(i, j, n, m, grid);
                }
            }
        }
        //returning the count.
        return count;
    }

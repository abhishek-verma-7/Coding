Given a binary tree, check if the tree can be folded or not. A tree can be folded if left and right subtrees of the tree 
are structure wise mirror image of each other. An empty tree is considered as foldable.
Consider the below trees:
(a) and (b) can be folded.
(c) and (d) cannot be folded.


(a)
       10
     /    \
    7      15
     \    /
      9  11
(b)
        10
       /  \
      7    15
     /      \
    9       11
(c)
        10
       /  \
      7   15
     /    /
    5   11
(d)
         10
       /   \
      7     15
    /  \    /
   9   10  12
 
Example 1:

Input:
     10
    /    \
   7     15
 /  \   /  \
N   9  11   N
Output:Yes
Explaination:Structure of every left and right subtree are same. 

//Function that checks if trees with roots n1 and n2 are mirror of each other.
bool IsFoldableUtil(Node *n1, Node *n2) 
{
    //if both left and right subtrees are NULL then we return true.
    if (n1 == NULL && n2 == NULL) 
    {
        return true;
    }

    //if one of the trees is NULL and other is not then we return false.
    if (n1 == NULL || n2 == NULL) {
        return false;
    }

    //else we check recursively if left and right subtrees are 
    //mirrors of their counterparts.
    return IsFoldableUtil(n1->left,n2->right)&&IsFoldableUtil(n1->right,n2->left);
}

//Function to check whether a binary tree is foldable or not.
bool IsFoldable(Node *root) 
{
    if (root == NULL) 
    {
        return true;
    }
    return IsFoldableUtil(root->left, root->right);
}

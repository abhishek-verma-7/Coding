Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. 
Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example 1:
Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
 
 bool isCycleUtil(vector<int> adj[], int s, bool visited[], int parent)
    {
        visited[s] = true;
        
        for(int u : adj[s])
        {
            if(visited[u] == false)
            {
                if(isCycleUtil(adj, u, visited, s) == true)
                    return true;
            }
            
            else if(u != parent)
                    return true;
        }
        return false;
    }
    
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        bool visited[V] = {false};
        
        for(int i = 0; i < V; i++)
        {
            if(visited[i] == false)
            {
                if(isCycleUtil(adj, i, visited, -1) == true)
                    return true;
            }
        }
        return false;
    }

Given a Linked List Representation of Complete Binary Tree. The task is to construct the Binary tree.
Note : The complete binary tree is represented as a linked list in a way where if root node is stored at position i, 
its left, and right children are stored at position 2*i+1, 2*i+2 respectively.

Example 1:

Input:
N = 5
K = 1->2->3->4->5
Output: 1 2 3 4 5
Explanation: The tree would look like
      1
    /   \
   2     3
 /  \
4   5
Now, the level order traversal of
the above tree is 1 2 3 4 5.


//Function to make binary tree from linked list.
void convert(Node *head, TreeNode *&root) {
    // Your code here
    // Just peforming the level order traversal of binary tree & inserting data step by step
    //queue to store the parent nodes.
    queue<TreeNode *> q;
    
     //base case.
    if(head == NULL)
    {
        root = NULL;
        return;
    }
    
    //the first node is always the root node so we add it to the queue.
    root = new TreeNode(head->data);
    q.push(root);
    
    head = head->next;
    
    //using a loop until we reach end of the linked list.
    while(head)
    {
        //storing the front node from queue and removing it from queue.
        TreeNode *k = q.front();
        q.pop();
        
        //taking next two nodes from the linked list and adding them as 
        //children of the current parent node. Pushing them into the queue
        //so that they will be parents to the future nodes.
        TreeNode *leftT = NULL;
        TreeNode *rightT = NULL;
        leftT = new TreeNode(head->data);
        
        q.push(leftT);
        head = head->next;
        
        if(head)
        {
            rightT = new TreeNode(head->data);
            head = head->next;
        }
        
        //assigning left and right children of parent node.
        k->left = leftT;
        k->right = rightT;
    }
}

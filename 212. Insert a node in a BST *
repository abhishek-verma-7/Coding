Given a BST and a key K. If K is not present in the BST, Insert a new Node with a value equal to K into the BST. 
Note: If K is already present in the BST, don't modify the BST.
Example 1:

Input:
     2
   /   \
  1     3
K = 4
Output: 1 2 3 4
Explanation: After inserting the node 4
Inorder traversal will be 1 2 3 4.

// Function to insert a node in a BST.
Node* insert(Node* node, int data) {
    
    // if node is null, we return a new node with given data.
    if (node == NULL) 
        return new Node(data);

    // if given data is less than data at the current node, we call the
    // function recursively to insert new node in left subtree.
    if (data < node->data) 
        node->left = insert(node->left, data);

    // else if given data is more than data at the current node, we call the
    // function recursively to insert new node in right subtree.
    else if (data > node->data)
        node->right = insert(node->right, data);

    return node;
}

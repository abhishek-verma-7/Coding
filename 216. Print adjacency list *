Given the adjacency matrix representation of an undirected graph
your task is to complete the function printGraph() that takes the number of vertices (V) and the adjacency list as input parameters.
The function should return a new adjacency list, where each adjacency list contains the vertex itself at first position then all its adjacent nodes, 
in the same order of the given adjacency list of that vertex.

Example 1:
Input:

Output: 
0-> 1-> 4 
1-> 0-> 2-> 3-> 4 
2-> 1-> 3 
3-> 1-> 2-> 4 
4-> 0-> 1-> 3
Explanation:
As 0,1 and 3 is connected to 4 so 4th row
of the list containing 4 and its connected
nodes 0,1 and 3 and we have to add those in
sorted order and same for every row.

// Function to return the adjacency list for each vertex.
    vector<vector<int>> printGraph(int V, vector<int> adj[]) {
        vector<vector<int>> ans(V);

        // iterating over each vertex.
        for (int i = 0; i < V; i++) {
            // pushing the vertex at ith index and all the
            // nodes connected to it in the output list.
            ans[i].push_back(i);
            for (auto j : adj[i]) {
                ans[i].push_back(j);
            }
        }
        // returning the list.
        return ans;
    }

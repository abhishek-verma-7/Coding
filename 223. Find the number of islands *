Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of '0's (Water) and '1's(Land). 
Find the number of islands.
Note: An island is either surrounded by water or boundary of grid and is formed by connecting adjacent lands horizontally or vertically
or diagonally i.e., in all 8 directions.
Example 1:
Input:
grid = {{0,1},{1,0},{1,1},{1,0}}
Output:
1
Explanation:
The grid is-
0 1
1 0
1 1
1 0
All lands are connected.

// these lists are used to get row and column numbers of 8
    // neighbours of a given cell.
    vector<int> dx = {-1, 0, 1, 0, 1, -1, -1, 1};
    vector<int> dy = {0, -1, 0, 1, 1, 1, -1, -1};

    bool isValid(int x, int y, int n, int m) {
        return (x >= 0 and x < n and y >= 0 and y < m);
    }

    // Function to find the number of islands.
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();

        // boolean array to mark visited cells.
        // initially all cells are unvisited.
        vector<vector<bool>> vis(n, vector<bool>(m, false));

        // using queue for BFS.
        queue<pair<int, int>> q;
        int ans = 0;

        // traversing over all cells of given matrix.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // if cell is unvisited and grid value is 1, we increment the
                // count and mark it as visited.
                if (!vis[i][j] and grid[i][j] == '1') {
                    ans++;
                    vis[i][j] = true;

                    // pushing it into the queue.
                    q.push({i, j});
                    while (!q.empty()) {
                        int x = q.front().first;
                        int y = q.front().second;
                        q.pop();

                        for (int k = 0; k < 8; k++) {
                            // if row and column number is in range, grid value
                            // is 1 and cell is not yet visited,
                            if (isValid(x + dx[k], y + dy[k], n, m) and
                                !vis[x + dx[k]][y + dy[k]] and
                                grid[x + dx[k]][y + dy[k]] == '1') {
                                // we push the cell in queue and mark it
                                // visited.
                                q.push({x + dx[k], y + dy[k]});
                                vis[x + dx[k]][y + dy[k]] = true;
                            }
                        }
                    }
                }
            }
        }
        // returning the result.
        return ans;
    }

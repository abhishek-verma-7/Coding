Given a binary tree and an integer X. Your task is to complete the function countSubtreesWithSumX() that returns
the count of the number of subtress having total nodeâ€™s data sum equal to the value X.
Example: For the tree given below:            

              5
            /    \
        -10     3
        /    \    /  \
      9     8  -4 7

Subtree with sum 7:
             -10
            /      \
          9        8

and one node 7.

Example 1:

Input:
       5
    /    \
  -10     3
 /   \   /  \
 9   8 -4    7
X = 7
Output: 2
Explanation: Subtrees with sum 7 are
[9, 8, -10] and [7] (refer the example
in the problem description).

// Function to count number of subtrees having sum equal to given sum X.
int sum(Node *root, int x, int &count)
{
    if(root == NULL)
        return 0;
        
    int ls = sum(root->left, x, count);
    int rs = sum(root->right, x, count);
    int s = ls + root->data + rs;
    
    if(s == x)
        count++;
        
    return s;    
}

//Function to count number of subtrees having sum equal to given sum.
int countSubtreesWithSumX(Node* root, int X)
{
	// Code here
	int count = 0;
	sum(root, X, count);
	return count;
}
